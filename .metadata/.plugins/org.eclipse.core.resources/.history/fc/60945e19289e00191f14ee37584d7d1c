package kr.or.connect.daoexam.dao;

import java.util.Collections;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import kr.or.connect.daoexam.dto.Role;
import static kr.or.connect.daoexam.dao.RoleDaoSqls.*; // 미리 정의한 SQL을 사용하기 위함 (static import)

@Repository
public class RoleDao 
{
	/** SELECT_ALL */
	// 쿼리를 실행하기 위한 객체
	private NamedParameterJdbcTemplate jdbc; // ? 대신 이름으로 바인딩 가능 (결과값 가져올 수도 있음)
	private RowMapper<Role> rowMapper = BeanPropertyRowMapper.newInstance(Role.class);
	// BeanPropertyRowMapper객체를 통해 속성의 값을 자동으로 DTO에 담아주게 됨
	// DBMS에서는 단어와 단어를 구분할 때 언더바 사용 - ex) role_id
	// Java에서는 단어와 단어를 구분할 때 카멜 표기법을 사용 - ex) roleId
	// BeanPropertyRowMapper는 DBMS와 Java의 이름규칙을 맞춰주는 기능을 지님
	
	

	// Spring 버전 4.3부터는 ComponentScan으로 객체를 찾았을 때 기본 생성자가 없다면 자동으로 객체 주입
	public RoleDao(DataSource dataSource)  
	{
		this.jdbc = new NamedParameterJdbcTemplate(dataSource); // 객체생성
	}
	
	/** SELECT_ALL */
	public List<Role> selectAll()
	{
		return jdbc.query(SELECT_ALL, Collections.emptyMap(), rowMapper); // 비어있는 map객체를 하나 선언
		// static import를 쓰면 패키지 명 없이 static 멤버를 사용할 수 있음
		// SQL문에 바인딩 할 것이 있는 경우 바인딩할 값을 전달할 목적으로 사용하는 객체
		// SELECT 건 당 정보를 DTO에 저장하는 목적으로 사용
		// query() : 결과가 여러 건이었을 때 내부적으로 반복하면서 DTO를 생성, 그 결과를 리스트에 담아줌
	}
}