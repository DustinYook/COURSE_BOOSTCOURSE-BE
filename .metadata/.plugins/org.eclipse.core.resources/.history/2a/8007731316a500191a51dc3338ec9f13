package kr.or.connect.guestbook.controller;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class FileController 
{
	@GetMapping("/uploadform")
	public String uploadform()
	{
		return "uploadform"; // 파일 업로드 폼만 보여줌
	}
	
	// 실제 파일업로드 요청이 들어왔을 때 처리되는 부분
	@PostMapping("/upload")
	public String upload(@RequestParam("file") MultipartFile file)
	{
		System.out.println("파일이름: " + file.getOriginalFilename());
		System.out.println("파일크기: " + file.getSize());
		// 얻어온 정보들은 DB에 저장
		
		try( 
				FileOutputStream fos = new FileOutputStream("C:/tmp/" + file.getOriginalFilename()); 
				// 저장위치 지정 (파일이름 중복을 막기위해 현재시간을 파일이름에 append하는 방법을 고려해볼 수도 있음)
				InputStream is = file.getInputStream();
		)
		{
			int readCount = 0;
			byte[] buffer = new byte[1024];
			while((readCount = is.read(buffer)) != -1)
				fos.write(buffer, 0, readCount);
		}
		catch (Exception ex) 
		{
			throw new RuntimeException("file save error!");
		}
		
		return "uploadok"; // 업로드 성공시 uploadok뷰로 이동시킴
	}
	
	@GetMapping("/download")
	public void download(HttpServletResponse response)
	{
		// 직접 파일 정보를 변수에 저장해 놨지만, 이 부분은 실제로 DB에서 읽어와야 한다
		String fileName = "connect.png";
		String saveFileName = "c:/tmp/connect.png";
		String contentType = "image/png";
		int fileLength = 1116303;
		
		response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\";");
		response.setHeader("Content-Transfer-Encoding", "binary");
		response.setHeader("Content-Type", contentType);
		response.setHeader("Content-Length", "" + fileLength);
		response.setHeader("Pragma", "no-cache;");
		response.setHeader("Expires", "-1");
		
		 try(FileInputStream fis = new FileInputStream(saveFileName);
	         OutputStream out = response.getOutputStream();){
			 int readCount = 0;
			 byte[] buffer = new byte[1024];
			 while((readCount = fis.read(buffer)) != -1)
				 out.write(buffer,0,readCount);
	     }
		 catch(Exception ex)
		 {
			 throw new RuntimeException("file Save Error");
	     }
	}
}
